1.字符串操作
  str.toUpperCase()把字符串全部变为大写
  str.toLowerCase()把字符串全部变为小写
  str.indexOf("s")返回字符s在str中的位置，如果str中没有s则返回-1
  str.slice(n,m)返回索引n-m之间的字符串
  str.slice(n)返回索引n到结束的字符串
  str.substring(n,m)返回索引n-m之间的字符串
  str.substring(n)返回索引n到结束的字符串
  str.substr(n,m)   参数1: 索引, 参数2:要截取的长度
  str.split(",")将字符串以 , 分割成数组
  str.replace(/[0-9]+/g,"b")将str中的a替换为b
  str.trim()去除str中前后的空格
  str.search(/[0-9]+/g) // 返回匹配到的第一个字符串的索引, 没有匹配到, 返回-1

  ES6新方法
  str.includes("a") 检测字符串中是否包含指定字符串，包含返回true，否则返回false
  str.startWith("a")检测字符串是否以指定字符串开头，返回true/false
  str.endsWith("a")检测字符串是否以指定字符串结尾，返回true/false 

2.数组操作
  array.indexOf(param) 搜索指定元素的位置，未找到则返回-1
  array.lastIndexOf(param) 从右到左搜索指定元素出现的位置，未找到则返回-1
  array.slice(n,m) //截取数组  并返回一个新的数组  
  array.slice(n)//截取数组     并返回一个新的数组
  array.push(p)//向数组末尾增加若干元素
  array.pop（）//删除最后一个元素
  array.unshift(p)//向数组头部增加若干元素
  array.shift()//删除数组第一个元素
  array.sort()//按unicode进行排序
  array.reverse()//把整个数组收尾反转
  array.splice(n,m,p)//从索引n处开始删除m个元素，并添加p元素，并返回删除的元素
  array.splice(n,m)//从索引n处开始删除m个元素,返回被删除的元素
  array.splice(n,0,p)//从索引n处添加元素p，返回[]
  array.concat(array2)//链接array和array2，array并没有被修改，该方法会返回一个新的数组
  array.join()//把array的每个元素都用指定的字符串连接起来，并返回连接后的字符串
  
  ES6新方法
  Array.isArray(arr)//判断arr是否为数组，返回true/fasle
  Array.from()可接收三个参数，第一个参数为类数组对象，第二个参数为映射函数，如果使用了映射函数，可以传第三个参数表示映射函数的this值。
  function translate () {
    return Array.from(arguments, (value) => value+1);
  }
  let numbers = translate(1, 2, 3);
  console.log(numbers); // [2, 3, 4]

  let helper = {
    add (value) {
        return value+1;
    }
   }
  function translate () {
    return Array.from(arguments, helper.add, helper);
  }
  let numbers = translate(1, 2, 3);
  console.log(numbers); // [2, 3, 4]
  
  find()方法可根据某个条件查找匹配的元素，参数为回调函数和回调函数的值，回调函数的参数为：元素、索引和数组本身
  findIndex()方法类似，不过返回的是元素的索引值。
  例：
  let numbers = [1, 2, 3, 4, 5];
  console.log(numbers.find(n => n > 3)); 
  console.log(numbers.findIndex(n => n > 3)); 
  numbers.find((n,index,arr)=>n>3)
  numbers.find(function(element,index,arr){
  return element>3;
  })

  array.forEach(function(element,index,arr){//forEach对数据进行循环，arr是数组本身,index,arr 参数可选
   
})
 或
 array.forEach((element,index,arr)=>{

})
  array.map((element,index,arr)=>{//映射数组(遍历数组),有return 返回一个新数组 arr是数组本身,index,arr 参数可选
   //该方法可以把一个数组映射成为新数组
  return element+"元素";
})
  array.filter((element,inde,arr)=>element>3)//过滤数组，返回一个满足要求的数组 （返回大于3的元素组成的新数组）  
  等同：array.filter((element,inde,arr)=>{return element>3})
  array.every((element,index,arr)=>element>3)//依据判断条件，数组的元素是否全满足，若满足则返回ture
  array.some((element,index,arr)=>element>3)// 依据判断条件，数组的元素是否有一个满足，若有一个满足则返回ture
  array.find((element,index,arr)=>element===2)//找到第一个符合条件的数组成员
  array.findIndex((element,index,arr)=>element===2)//找到第一个符合条件的数组成员的索引值
  array.includes(param)//检测数组是否含有给定值，返回true/false

3.js对象

  访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。
  如果属性名包含特殊字符，就必须用''括起来，并且调用时必须使用["xxx"]形式
  如果我们要检测对象是否拥有某一属性，可以用in操作符，返回true或false
  如果in判断一个属性存在，这个属性不一定是该对象的，它可能是该对象继承得到的
  所以用hasOwnProperty("xxx")判断对象自身是否拥有某属性

4.循环
  for循环
  for   in 循环可以把一个对象的所有属性依次循环出来
  for(var key in json){
   console.log(key);
  }  
  for in循环也可以对数组进行循环
  for(var i in array){
  console.log(i);//得到的是数组索引值
  console.log(array[i]);//得到索引对应的元素的string   
  }
  while 循环 只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。
  do...while循环 它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件
