1.git config --global user.name "XXX"
  git config --global user.email"XXX"
2.git init
3.git add "XXX"
  git commit -m  "ssssss"
4.git log  查看历史记录
5.git reset --hard HEAD  HEAD^ HEAD^^  HEAD~100  版本回退用HEAD
6.git reset --hard  commit_id 通过版本ID 回退到固定ID号的版本
7.git reflog 查看历史命令
8.缓存区的概念――git add 是将修改提交到缓存区 git commit是将缓存区的修改提交    git管理的是文件的修改  而不是文件
9.git checkout --file 就是让这个文件回到最近一次git commit或git add时的状态    命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
10.git status 查看状态
11.git rm file  删除文件
12.git remote add origin https://github.com/doudou459/doudouRepository.git
关联远程仓库
13.git push -u origin master 将本地仓库内容推送到远程仓库
14.git clone https://github.com/doudou459/doudouRepository.git
15.git branch branchName  新建分支
   git checkout branchName  切换到分支
   git checkout -b branchName 新建分支并切换到分支
   git switch -c branchName 新建分支并切换到分支（新方法）
   git switch branchName 切换到分支（新方法）    
16.git branch 查看分支
17.git merge 将分支合并到当前分支
18.git branch -d branchName 删除分支
19.修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
   当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
   在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。
20.开发一个新feature，最好新建一个分支；
   如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
21.多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
22.命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

命令git tag可以查看所有标签。

23.https://www.liaoxuefeng.com/wiki/896043488029600 完整资料地址！
